% @type value() = runtime_value() | abstract_value() | compiletime_value().

% @type runtime_value() = loc() | act() | nil_() | num() | sym() | block().
% those values are available during runtime, a.k.a. immediates.

% @type abstract_value() = any_() | some() | option().
% Tose values are generated during merges in the analysis.

% @type compiletime_value() = reg() | slot() | this() | struct() | array() | lock() | now() | nil_() | num() | sym() | block() | act_block() | act_struct().
% those values are (also) generated by the parser

% @type slot_name_value() = reg() | sym() | num().
% A value that can be used as a slot name

% @type creating_value() = sym() | num() | block_ref() | struct() | array() | lock() | instructions:activate().
% a value that creates a new entity for the analysis such as constants and new statements
% all those values have a block-local id (called nth) to distinguish them syntactically

% *****************************
% runtime values
% *****************************

% @type loc(Activation, Index)
% 	Activation = act()
%	Index = integer().
% A location plays the role of a memory address for structs. Locations are
% created during analysis and not by the parser.
% @see struct
-record (loc, {nth, activation_ref}). %struct location

% @type activation_ref(PathCompontents)
% 	PathCompontents = list(integer()|refs:activation_option()).
% An identifier for an activation that is being analyzed.
% the path is a path in the creation tree starting from the root; (the root is the last element in the array)
% each component is either an option or an nth index telling you where to go in the creation tree
% to reach the node;
% e.g., {node_id, [2, {option, {blockRef, Foo}, {loc, XYZ}}], 1} means, that starting from root
% you follow the first option (root only has one) which leads you to a branch node; there you go to option
% Foo::XYZ and from there you go to the activation that has been created second in Foo
-record (activation_ref, {path_components}).

% *****************************
% abstract values
% *****************************

% @type value_type() = sym | num | block | loc | act.

% @type any_().
% a placeholder for any value with any value type.
-record (any, {}).

% @type some(Type)
% 	Type = value_type().
% A placeholder for some value of a known type.
-record (some, {type}).

% @type one_of(Type, ValueSet)
%	Type = value_type()
%	ValueSet = set(value()).
% A set of concrete values of the given type.
-record (one_of, {type, value_set}).

% *****************************
% immediate values
% *****************************

% @type sym(Value)
% 	Name = atom().
% A symbol
% Example: <pre>'symname</pre>
-record (sym, {nth, name}).

% @type num(Value)
%	Value = integer() | float().
% A nummeric value
% Example: <pre>42</pre>
-record (num, {nth, value}).

% @type block(Name, Filename, StartLine, EndLine, Body)
%	Name = atom()
%	Filename = string()
%	StartLine = integer()
%	EndLine = integer()
%	Body = [instruction()].	
% The id is the macro name or 'main' for the main block. The id is on position
% 2 of the tuple so that one can search a list of blocks using lists:keysearch/3
% Example: <pre>{ *blockbody* }</pre>
-record (block, {name, filename, start_line, end_line, body}).

% @type block_ref(Nth, Name)
% 	Nth = integer(),
%	Name = atom().
% A reference to another block;
-record (block_ref, {nth, name}).


% @type act_block(Activation)
%	Activation = now() | reg().
% the block of an activation as a value
% Example: <pre>now#block</pre>
-record (act_block, {activation}).

% @type act_struct(Activation)
%	Activation = now() | reg().
% the struct of an activation as a value
% Example: <pre>now#struct ; this is equivalent to 'this'</pre>
-record (act_struct, {activation}).

% @type nil_().
% Example: <pre>nil</pre>
-record (nil, {}).

% @type reg(Name)
%	Name = atom().
% a reference to the register with the given name.
% Example: <pre>%regname</pre>
-record (reg, {name}). %register name

% @type slot(Context, Slot)
%	Context = reg() | this()
% 	Slot = slot_name_value().
-record (slot, {context, slot}).

% @type this().
% Example: <pre>this</pre>
-record (this, {}).

% @type struct().
% creates a new struct
% Example: <pre>struct</pre>
-record (new_struct, {nth}).

% @type array().
% creates a new array
% Example: <pre>array</pre>
-record (new_array, {nth}).

% @type lock().
% creates a new lock
% Example: <pre>lock</pre>
-record (new_lock, {nth}).

% @type now().
% Example: <pre>now</pre>
-record (now, {}).
